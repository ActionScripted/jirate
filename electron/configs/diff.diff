diff --git a/electron/configs/webpack.config.base.js b/electron/configs/webpack.config.base.js
index aa4d0d2..e9930e9 100644
--- a/electron/configs/webpack.config.base.js
+++ b/electron/configs/webpack.config.base.js
@@ -5,8 +5,8 @@
 import path from 'path';
 import webpack from 'webpack';
 import fs from 'fs';
-import { dependencies as externals } from './app/package.json';
-import { dependencies as possibleExternals } from './package.json';
+import { dependencies as externals } from '../app/package';
+import { dependencies as possibleExternals } from '../package';
 
 // Find all the dependencies without a `main` property and add them as webpack externals
 function filterDepWithoutEntryPoints(dep: string): boolean {
@@ -14,12 +14,12 @@ function filterDepWithoutEntryPoints(dep: string): boolean {
   try {
     // If the root of the dependency has an index.js, return true
     if (
-      fs.existsSync(path.resolve(__dirname, `node_modules/${dep}/index.js`))
+      fs.existsSync(path.join(__dirname, '..', `node_modules/${dep}/index.js`))
     ) {
       return false;
     }
     const pgkString = fs
-      .readFileSync(path.resolve(__dirname, `node_modules/${dep}/package.json`))
+      .readFileSync(require.resolve(`${dep}/package`))
       .toString();
     const pkg = JSON.parse(pgkString);
     const fields = ['main', 'module', 'jsnext:main', 'browser'];
@@ -52,29 +52,17 @@ export default {
   },
 
   output: {
-    path: path.resolve(__dirname, 'app'),
+    path: path.join(__dirname, '..', 'app'),
     // https://github.com/webpack/webpack/issues/1114
     libraryTarget: 'commonjs2'
   },
 
   /**
    * Determine the array of extensions that should be used to resolve modules.
-   * NOTE: if you change aliases, please also update .flowconfig
    */
   resolve: {
-    alias: {
-      '~': path.resolve(__dirname, 'app'),
-      Components: path.resolve(__dirname, 'app/components'),
-      Constants: path.resolve(__dirname, 'app/constants'),
-      Containers: path.resolve(__dirname, 'app/containers'),
-      Dist: path.resolve(__dirname, 'app/dist'),
-      Reducers: path.resolve(__dirname, 'app/reducers'),
-      Store: path.resolve(__dirname, 'app/store'),
-      Styles: path.resolve(__dirname, 'app/styles'),
-      Utils: path.resolve(__dirname, 'app/utils')
-    },
     extensions: ['.js', '.jsx', '.json'],
-    modules: [path.resolve(__dirname, 'app'), 'node_modules']
+    modules: [path.join(__dirname, '..', 'app'), 'node_modules']
   },
 
   plugins: [
diff --git a/electron/configs/webpack.config.main.prod.js b/electron/configs/webpack.config.main.prod.js
index 3b1bcb2..9567f17 100644
--- a/electron/configs/webpack.config.main.prod.js
+++ b/electron/configs/webpack.config.main.prod.js
@@ -2,12 +2,13 @@
  * Webpack config for production electron main process
  */
 
+import path from 'path';
 import webpack from 'webpack';
 import merge from 'webpack-merge';
 import UglifyJSPlugin from 'uglifyjs-webpack-plugin';
 import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';
 import baseConfig from './webpack.config.base';
-import CheckNodeEnv from './internals/scripts/CheckNodeEnv';
+import CheckNodeEnv from '../internals/scripts/CheckNodeEnv';
 
 CheckNodeEnv('production');
 
@@ -21,18 +22,20 @@ export default merge.smart(baseConfig, {
   entry: './app/main.dev',
 
   output: {
-    path: __dirname,
+    path: path.join(__dirname, '..'),
     filename: './app/main.prod.js'
   },
 
   optimization: {
-    minimizer: [
-      new UglifyJSPlugin({
-        cache: true,
-        parallel: true,
-        sourceMap: true
-      })
-    ]
+    minimizer: process.env.E2E_BUILD
+      ? []
+      : [
+          new UglifyJSPlugin({
+            parallel: true,
+            sourceMap: true,
+            cache: true
+          })
+        ]
   },
 
   plugins: [
@@ -53,7 +56,8 @@ export default merge.smart(baseConfig, {
      */
     new webpack.EnvironmentPlugin({
       NODE_ENV: 'production',
-      DEBUG_PROD: 'false'
+      DEBUG_PROD: false,
+      START_MINIMIZED: false
     })
   ],
 
diff --git a/electron/configs/webpack.config.renderer.dev.dll.js b/electron/configs/webpack.config.renderer.dev.dll.js
index b0f5b5d..3c8c634 100644
--- a/electron/configs/webpack.config.renderer.dev.dll.js
+++ b/electron/configs/webpack.config.renderer.dev.dll.js
@@ -8,15 +8,15 @@ import webpack from 'webpack';
 import path from 'path';
 import merge from 'webpack-merge';
 import baseConfig from './webpack.config.base';
-import { dependencies } from './package.json';
-import CheckNodeEnv from './internals/scripts/CheckNodeEnv';
+import { dependencies } from '../package';
+import CheckNodeEnv from '../internals/scripts/CheckNodeEnv';
 
 CheckNodeEnv('development');
 
-const dist = path.resolve(process.cwd(), 'dll');
+const dist = path.join(__dirname, '..', 'dll');
 
 export default merge.smart(baseConfig, {
-  context: process.cwd(),
+  context: path.join(__dirname, '..'),
 
   devtool: 'eval',
 
@@ -66,9 +66,9 @@ export default merge.smart(baseConfig, {
     new webpack.LoaderOptionsPlugin({
       debug: true,
       options: {
-        context: path.resolve(process.cwd(), 'app'),
+        context: path.join(__dirname, '..', 'app'),
         output: {
-          path: path.resolve(process.cwd(), 'dll')
+          path: path.join(__dirname, '..', 'dll')
         }
       }
     })
diff --git a/electron/configs/webpack.config.renderer.dev.js b/electron/configs/webpack.config.renderer.dev.js
index 62c87b7..a52cf8f 100644
--- a/electron/configs/webpack.config.renderer.dev.js
+++ b/electron/configs/webpack.config.renderer.dev.js
@@ -14,13 +14,13 @@ import chalk from 'chalk';
 import merge from 'webpack-merge';
 import { spawn, execSync } from 'child_process';
 import baseConfig from './webpack.config.base';
-import CheckNodeEnv from './internals/scripts/CheckNodeEnv';
+import CheckNodeEnv from '../internals/scripts/CheckNodeEnv';
 
 CheckNodeEnv('development');
 
 const port = process.env.PORT || 1212;
 const publicPath = `http://localhost:${port}/dist`;
-const dll = path.resolve(process.cwd(), 'dll');
+const dll = path.join(__dirname, '..', 'dll');
 const manifest = path.resolve(dll, 'renderer.json');
 const requiredByDLLConfig = module.parent.filename.includes(
   'webpack.config.renderer.dev.dll'
@@ -49,7 +49,7 @@ export default merge.smart(baseConfig, {
     'react-hot-loader/patch',
     `webpack-dev-server/client?http://localhost:${port}/`,
     'webpack/hot/only-dev-server',
-    path.join(__dirname, 'app/index.js')
+    require.resolve('../app/index')
   ],
 
   output: {
@@ -208,7 +208,7 @@ export default merge.smart(baseConfig, {
     requiredByDLLConfig
       ? null
       : new webpack.DllReferencePlugin({
-          context: process.cwd(),
+          context: path.join(__dirname, '..', 'dll'),
           manifest: require(manifest),
           sourceType: 'var'
         }),
diff --git a/electron/configs/webpack.config.renderer.prod.js b/electron/configs/webpack.config.renderer.prod.js
index 3a9ec9c..6d070bc 100644
--- a/electron/configs/webpack.config.renderer.prod.js
+++ b/electron/configs/webpack.config.renderer.prod.js
@@ -10,7 +10,7 @@ import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';
 import merge from 'webpack-merge';
 import UglifyJSPlugin from 'uglifyjs-webpack-plugin';
 import baseConfig from './webpack.config.base';
-import CheckNodeEnv from './internals/scripts/CheckNodeEnv';
+import CheckNodeEnv from '../internals/scripts/CheckNodeEnv';
 
 CheckNodeEnv('production');
 
@@ -21,10 +21,10 @@ export default merge.smart(baseConfig, {
 
   target: 'electron-renderer',
 
-  entry: './app/index',
+  entry: path.join(__dirname, '..', 'app/index'),
 
   output: {
-    path: path.join(__dirname, 'app/dist'),
+    path: path.join(__dirname, '..', 'app/dist'),
     publicPath: './dist/',
     filename: 'renderer.prod.js'
   },
@@ -170,21 +170,23 @@ export default merge.smart(baseConfig, {
   },
 
   optimization: {
-    minimizer: [
-      new UglifyJSPlugin({
-        cache: true,
-        parallel: true,
-        sourceMap: true
-      }),
-      new OptimizeCSSAssetsPlugin({
-        cssProcessorOptions: {
-          map: {
-            inline: false,
-            annotation: true
-          }
-        }
-      })
-    ]
+    minimizer: process.env.E2E_BUILD
+      ? []
+      : [
+          new UglifyJSPlugin({
+            parallel: true,
+            sourceMap: true,
+            cache: true
+          }),
+          new OptimizeCSSAssetsPlugin({
+            cssProcessorOptions: {
+              map: {
+                inline: false,
+                annotation: true
+              }
+            }
+          })
+        ]
   },
 
   plugins: [
